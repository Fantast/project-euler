package opener15;

import tasks.AbstractTask;
import tasks.Tester;
import utils.log.Logger;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

//Answer :
public class Task_40 extends AbstractTask {

    public static void main(String[] args) {
        Logger.init("default.log");
        Tester.test(new Task_40());
        Logger.close();
    }

    int mem[] = new int[]{
            0, 0, 3, 0, 1, 6, 0, 1842, 9, 0, 7, 12, 0, 132, 15, 51, 51, 18, 7, 0, 21, 0, 51, 24, 0, 0, 27, 52, 52, 30, 7, 0, 33, 0, 52, 36, 0, 0, 39, 58, 58, 42, 7, 0, 45, 0, 58, 48, 0, 0, 51, 0, 0, 54, 13, 0, 57, 0, 0, 60, 0, 0, 63, 4, 0, 66, 0, 7, 69, 0, 0, 72, 108, 108, 75, 7, 0, 78, 0, 108, 81, 0, 0, 84, 109, 109, 87, 7, 0, 90, 0, 109, 93, 0, 0, 96, 115, 115, 99, 7, 0, 102, 0, 115, 105, 0, 0, 108, 0, 0, 111, 10, 0, 114, 0, 0, 117, 0, 0, 120, 4, 0, 123, 0, 7, 126, 0, 0, 129, 0, 0, 1398, 4, 7, 135, 150, 150, 138, 7, 0, 141, 0, 150, 144, 0, 0, 147, 1839, 1839, 150, 0, 0, 153, 0, 1839, 156, 0, 0, 159, 0, 0, 1839, 0, 0, 165, 4, 7, 168, 183, 183, 171, 7, 0, 174, 0, 183, 177, 0, 0, 180, 163, 163, 183, 0, 0, 186, 0, 163, 189, 0, 0, 192, 0, 0, 195, 4, 7, 198, 213, 213, 201, 7, 0, 204, 0, 213, 207, 0, 0, 210, 193, 193, 213, 0, 0, 216, 0, 193, 219, 0, 0, 222, 235, 235, 225, 0, 0, 228, 0, 235, 231, 0, 0, 234, 0, 0, 237, 163, 0, 243, 0, 0, 249, 0, 0, 246, 0, 163, 276, 193, 0, 252, 0, 235, 255, 0, 0, 258, 4, 163, 261, 163, 0, 267, 0, 0, 273, 0, 0, 270, 0, 163, 276, 0, 0, 249, 0, 0, 279, 4, 7, 282, 297, 297, 285, 7, 0, 288, 0, 297, 291, 0, 0, 294, 277, 277, 297, 0, 0, 300, 0, 277, 303, 0, 0, 306, 377, 377, 309, 277, 0, 312, 0, 377, 315, 0, 0, 318, 354, 354, 321, 7, 0, 324, 0, 354, 327, 0, 0, 330, 355, 355, 333, 7, 0, 336, 0, 355, 339, 0, 0, 342, 361, 361, 345, 7, 0, 348, 0, 361, 351, 0, 0, 354, 0, 0, 357, 235, 0, 360, 0, 0, 363, 0, 0, 366, 4, 0, 369, 0, 7, 372, 0, 0, 375, 0, 0, 277, 0, 0, 381, 4, 7, 384, 399, 399, 387, 7, 0, 390, 0, 399, 393, 0, 0, 396, 379, 379, 399, 0, 0, 402, 0, 379, 405, 0, 0, 408, 421, 421, 411, 4, 0, 414, 0, 421, 417, 0, 0, 420, 0, 4, 423, 436, 436, 426, 0, 0, 429, 0, 436, 432, 0, 0, 435, 0, 0, 438, 436, 436, 441, 379, 0, 444, 0, 436, 447, 0, 0, 450, 436, 0, 456, 0, 0, 462, 0, 0, 459, 0, 436, 1296, 4, 421, 465, 4, 436, 468, 436, 0, 474, 0, 0, 480, 0, 0, 477, 0, 436, 1296, 493, 493, 483, 0, 0, 486, 0, 493, 489, 0, 0, 492, 0, 0, 495, 493, 493, 498, 436, 0, 501, 0, 493, 504, 0, 0, 507, 543, 543, 510, 7, 0, 513, 0, 543, 516, 0, 0, 519, 544, 544, 522, 7, 0, 525, 0, 544, 528, 0, 0, 531, 550, 550, 534, 7, 0, 537, 0, 550, 540, 0, 0, 543, 0, 0, 546, 436, 0, 549, 0, 0, 552, 0, 0, 555, 4, 0, 558, 0, 7, 561, 0, 0, 564, 0, 684, 567, 603, 603, 570, 7, 0, 573, 0, 603, 576, 0, 0, 579, 604, 604, 582, 7, 0, 585, 0, 604, 588, 0, 0, 591, 610, 610, 594, 7, 0, 597, 0, 610, 600, 0, 0, 603, 0, 0, 606, 565, 0, 609, 0, 0, 612, 0, 0, 615, 4, 0, 618, 0, 7, 621, 0, 0, 624, 660, 660, 627, 7, 0, 630, 0, 660, 633, 0, 0, 636, 661, 661, 639, 7, 0, 642, 0, 661, 645, 0, 0, 648, 667, 667, 651, 7, 0, 654, 0, 667, 657, 0, 0, 660, 0, 0, 663, 493, 0, 666, 0, 0, 669, 0, 0, 672, 4, 0, 675, 0, 7, 678, 0, 0, 681, 0, 0, 378, 4, 7, 687, 702, 702, 690, 7, 0, 693, 0, 702, 696, 0, 0, 699, 493, 493, 702, 0, 0, 705, 0, 493, 708, 0, 0, 711, 4, 7, 714, 729, 729, 717, 7, 0, 720, 0, 729, 723, 0, 0, 726, 436, 436, 729, 0, 0, 732, 0, 436, 735, 0, 0, 738, 751, 751, 741, 0, 0, 744, 0, 751, 747, 0, 0, 750, 0, 0, 753, 751, 751, 756, 436, 0, 759, 0, 751, 762, 0, 0, 765, 4, 751, 768, 804, 804, 771, 7, 0, 774, 0, 804, 777, 0, 0, 780, 805, 805, 783, 7, 0, 786, 0, 805, 789, 0, 0, 792, 811, 811, 795, 7, 0, 798, 0, 811, 801, 0, 0, 804, 0, 0, 807, 436, 0, 810, 0, 0, 813, 0, 0, 816, 4, 0, 819, 0, 7, 822, 0, 0, 825, 861, 861, 828, 7, 0, 831, 0, 861, 834, 0, 0, 837, 862, 862, 840, 7, 0, 843, 0, 862, 846, 0, 0, 849, 868, 868, 852, 7, 0, 855, 0, 868, 858, 0, 0, 861, 0, 0, 864, 493, 0, 867, 0, 0, 870, 0, 0, 873, 4, 0, 876, 0, 7, 879, 0, 0, 882, 0, 1002, 885, 921, 921, 888, 7, 0, 891, 0, 921, 894, 0, 0, 897, 922, 922, 900, 7, 0, 903, 0, 922, 906, 0, 0, 909, 928, 928, 912, 7, 0, 915, 0, 928, 918, 0, 0, 921, 0, 0, 924, 883, 0, 927, 0, 0, 930, 0, 0, 933, 4, 0, 936, 0, 7, 939, 0, 0, 942, 978, 978, 945, 7, 0, 948, 0, 978, 951, 0, 0, 954, 979, 979, 957, 7, 0, 960, 0, 979, 963, 0, 0, 966, 985, 985, 969, 7, 0, 972, 0, 985, 975, 0, 0, 978, 0, 0, 981, 751, 0, 984, 0, 0, 987, 0, 0, 990, 4, 0, 993, 0, 7, 996, 0, 0, 999, 0, 0, 378, 4, 7, 1005, 1020, 1020, 1008, 7, 0, 1011, 0, 1020, 1014, 0, 0, 1017, 751, 751, 1020, 0, 0, 1023, 0, 751, 1026, 0, 0, 1029, 4, 7, 1032, 1047, 1047, 1035, 7, 0, 1038, 0, 1047, 1041, 0, 0, 1044, 493, 493, 1047, 0, 0, 1050, 0, 493, 1053, 0, 0, 1056, 4, 7, 1059, 1074, 1074, 1062, 7, 0, 1065, 0, 1074, 1068, 0, 0, 1071, 436, 436, 1074, 0, 0, 1077, 0, 436, 1080, 0, 0, 1083, 751, 0, 1086, 0, 493, 1089, 0, 0, 1092, 0, 1269, 1095, 1131, 1131, 1098, 7, 0, 1101, 0, 1131, 1104, 0, 0, 1107, 1132, 1132, 1110, 7, 0, 1113, 0, 1132, 1116, 0, 0, 1119, 1138, 1138, 1122, 7, 0, 1125, 0, 1138, 1128, 0, 0, 1131, 0, 0, 1134, 1093, 0, 1137, 0, 0, 1140, 0, 0, 1143, 4, 0, 1146, 0, 7, 1149, 0, 0, 1152, 1188, 1188, 1155, 7, 0, 1158, 0, 1188, 1161, 0, 0, 1164, 1189, 1189, 1167, 7, 0, 1170, 0, 1189, 1173, 0, 0, 1176, 1195, 1195, 1179, 7, 0, 1182, 0, 1195, 1185, 0, 0, 1188, 0, 0, 1191, 436, 0, 1194, 0, 0, 1197, 0, 0, 1200, 4, 0, 1203, 0, 7, 1206, 0, 0, 1209, 1245, 1245, 1212, 7, 0, 1215, 0, 1245, 1218, 0, 0, 1221, 1246, 1246, 1224, 7, 0, 1227, 0, 1246, 1230, 0, 0, 1233, 1252, 1252, 1236, 7, 0, 1239, 0, 1252, 1242, 0, 0, 1245, 0, 0, 1248, 493, 0, 1251, 0, 0, 1254, 0, 0, 1257, 4, 0, 1260, 0, 7, 1263, 0, 0, 1266, 0, 0, 162, 4, 7, 1272, 1287, 1287, 1275, 7, 0, 1278, 0, 1287, 1281, 0, 0, 1284, 421, 421, 1287, 0, 0, 1290, 0, 421, 1293, 0, 0, 1296, 0, 0, 1299, 4, 7, 1302, 1317, 1317, 1305, 7, 0, 1308, 0, 1317, 1311, 0, 0, 1314, 1297, 1297, 1317, 0, 0, 1320, 0, 1297, 1323, 0, 0, 1326, 1397, 1397, 1329, 1297, 0, 1332, 0, 1397, 1335, 0, 0, 1338, 1374, 1374, 1341, 7, 0, 1344, 0, 1374, 1347, 0, 0, 1350, 1375, 1375, 1353, 7, 0, 1356, 0, 1375, 1359, 0, 0, 1362, 1381, 1381, 1365, 7, 0, 1368, 0, 1381, 1371, 0, 0, 1374, 0, 0, 1377, 421, 0, 1380, 0, 0, 1383, 0, 0, 1386, 4, 0, 1389, 0, 7, 1392, 0, 0, 1395, 0, 0, 1297, 0, 0, 1401, 4, 7, 1404, 1419, 1419, 1407, 7, 0, 1410, 0, 1419, 1413, 0, 0, 1416, 1399, 1399, 1419, 0, 0, 1422, 0, 1399, 1425, 0, 0, 1428, 1441, 1441, 1431, 0, 0, 1434, 0, 1441, 1437, 0, 0, 1440, 0, 0, 1443, 0, 1563, 1446, 1482, 1482, 1449, 7, 0, 1452, 0, 1482, 1455, 0, 0, 1458, 1483, 1483, 1461, 7, 0, 1464, 0, 1483, 1467, 0, 0, 1470, 1489, 1489, 1473, 7, 0, 1476, 0, 1489, 1479, 0, 0, 1482, 0, 0, 1485, 1444, 0, 1488, 0, 0, 1491, 0, 0, 1494, 4, 0, 1497, 0, 7, 1500, 0, 0, 1503, 1539, 1539, 1506, 7, 0, 1509, 0, 1539, 1512, 0, 0, 1515, 1540, 1540, 1518, 7, 0, 1521, 0, 1540, 1524, 0, 0, 1527, 1546, 1546, 1530, 7, 0, 1533, 0, 1546, 1536, 0, 0, 1539, 0, 0, 1542, 1399, 0, 1545, 0, 0, 1548, 0, 0, 1551, 4, 0, 1554, 0, 7, 1557, 0, 0, 1560, 0, 0, 378, 4, 7, 1566, 1581, 1581, 1569, 7, 0, 1572, 0, 1581, 1575, 0, 0, 1578, 1441, 1441, 1581, 0, 0, 1584, 0, 1441, 1587, 0, 0, 1590, 0, 1710, 1593, 1629, 1629, 1596, 7, 0, 1599, 0, 1629, 1602, 0, 0, 1605, 1630, 1630, 1608, 7, 0, 1611, 0, 1630, 1614, 0, 0, 1617, 1636, 1636, 1620, 7, 0, 1623, 0, 1636, 1626, 0, 0, 1629, 0, 0, 1632, 1591, 0, 1635, 0, 0, 1638, 0, 0, 1641, 4, 0, 1644, 0, 7, 1647, 0, 0, 1650, 1686, 1686, 1653, 7, 0, 1656, 0, 1686, 1659, 0, 0, 1662, 1687, 1687, 1665, 7, 0, 1668, 0, 1687, 1671, 0, 0, 1674, 1693, 1693, 1677, 7, 0, 1680, 0, 1693, 1683, 0, 0, 1686, 0, 0, 1689, 1441, 0, 1692, 0, 0, 1695, 0, 0, 1698, 4, 0, 1701, 0, 7, 1704, 0, 0, 1707, 0, 0, 378, 4, 7, 1713, 1728, 1728, 1716, 7, 0, 1719, 0, 1728, 1722, 0, 0, 1725, 1441, 1441, 1728, 0, 0, 1731, 0, 1441, 1734, 0, 0, 1737, 0, 0, 1740, 4, 7, 1743, 1758, 1758, 1746, 7, 0, 1749, 0, 1758, 1752, 0, 0, 1755, 1738, 1738, 1758, 0, 0, 1761, 0, 1738, 1764, 0, 0, 1767, 1838, 1838, 1770, 1738, 0, 1773, 0, 1838, 1776, 0, 0, 1779, 1815, 1815, 1782, 7, 0, 1785, 0, 1815, 1788, 0, 0, 1791, 1816, 1816, 1794, 7, 0, 1797, 0, 1816, 1800, 0, 0, 1803, 1822, 1822, 1806, 7, 0, 1809, 0, 1822, 1812, 0, 0, 1815, 0, 0, 1818, 1441, 0, 1821, 0, 0, 1824, 0, 0, 1827, 4, 0, 1830, 0, 7, 1833, 0, 0, 1836, 0, 0, 1738, 0, 0, 0
    };

    Map<Integer, Integer> memory = new HashMap<>();

    int goal = 1839;

    private PrintWriter out;

    int p = 0;

    public void solving() throws IOException {
        System.out.println(mem.length);
        out = new PrintWriter(
                new BufferedWriter(
                        new FileWriter("/downloads/task40.out")));

//        for (int i = 0; i < mem.length; i+=3) {
//            int a = mem[i];
//            int b = mem[i+1];
//            int c = mem[i+2];
//            System.out.print(String.format("%5d%5d%5d", a, b, c));
//            if (a == b) {
//                System.out.println(String.format("     m%-5d= 0", a));
//            } else {
//                System.out.println();
//            }
//
//        }

        for (int i = 0; i < mem.length; i++) {
            memory.put(i, mem[i]);
        }

        while (true) {
            if (p == 378) {
                System.out.println(378);
                f378();
                continue;
            }
            if (p == 1269) {
                System.out.println(1269);
                f1269();
                continue;
            }
            if (p == 1296) {
                System.out.println(1296);
                f1296();
                continue;
            }
            if (p == 684) {
                if (get(0) != 0) {
                    System.out.println("684: ouch get(0) != 0");
                }
                System.out.println(684);
                f684();
                continue;
            }
            if (p == 1002) {
                System.out.println(1002);
                f1002();
                continue;
            }
            if (p == 162) {
                System.out.println(162);
//                f162();
//                continue;
            }
            if (p == 1563) {
                System.out.println(1563);
//                f162();
//                continue;
            }
            if (p == 1710) {
                System.out.println(1710);
//                f162();
//                continue;
            }
            int a = get(p);
            int b = get(p+1);
            int c = get(p+2);

            int av = get(a);
            int bv = get(b);
            int d = bv - av;
            set(b, d);

//            out.print(String.format("%4d - a: %5d, b: %5d, c: %5d, av: %5d, bv: %5d, av-bv=%5d -> ", p, a, b, c, av, bv, d));
//            out.print(String.format("%5d%5d%5d     m%-7d= m%d - m%d = %d", a, b, c, b, b, a, d));
            out.print(String.format("%5d%5d%5d     m%-7d= m%d - m%d = %d", mem[p], mem[p+1], mem[p+2], b, b, a, d));

            if (d <= 0 && c != p+3) {
                p = c;
                out.println(String.format("   -> %d", p));
            } else {
                p = p+3;
                out.println();
            }


            if (p == goal) {
                break;
            }
        }
        System.out.println(get(p));
    }

    private void f684() {
//        0    0  930     m[m7`]  = m883 = 1002
//        0    0  987     m[m7` + 1] = m751 = m[m7` - 2] - 1 = 0
//        0    7  996     m7      = m7` + 2 = 1858

        int m7 = get(7);
        int mm2 = get(m7 - 2);

//        set(m7 - 1, 0);
        set(m7, 1002);
        set(m7 + 1, mm2 - 1);

        set(7, m7+2);

        p = 378;
    }

    private void f378_0() {
        int m7 = get(7);
        int mm1 = get(m7 - 1);

        if (mm1 == 0) {
            p = 1296;
            set(421, 1);
            return;
        }

        set(421, 0);

        if (mm1 == 1) {
            p = 1296;
            return;
        }



        for (int i = mm1 - 1; i >= 1; i--) {
            set(m7, 684);
            set(m7 - 1, i);
            m7 += 2;
        }
        m7--;
        set(m7, 1);
        set(7, m7);

        p = 1296;
    }

    private void f378() {
        int m7 = get(7);
        int mm1 = get(m7 - 1);

        if (mm1 == 0) {
            p = 1296;
            set(421, 1);
            return;
        }

        set(421, 0);

        if (mm1 == 1) {
            p = 1296;
            return;
        }

//        0    0  552     m[m7` - 1] = m[m7` - 1] - 1;
//        0    0  612     m[m7`]   = m565 = 684
//        0    0  669     m[m7` + 1] = m[m7` - 1] - 1 = 6
//        0    7  678     m7      = m7` + 2 = 1847
//        0    0  378     m0      = 0   -> 378

        set(m7 - 1, mm1 - 1);
        set(m7, 684);
        set(m7 + 1, mm1 - 1);
        set(7, m7 + 2);

        p = 378;
    }

    private void f1269() {
        int m7 = get(7);
        int mm7 = get(m7 - 1);

        set(7, m7 - 1);
        set(421, mm7);

        f1296();
    }

    private void f1296() {
        int m7 = get(7);
        int mm7 = get(m7 - 1);
        int m421 = get(421);

        set(m7 - 1, m421);
        set(1397, mm7);

        p = mm7;
    }

    private void f1002() {
//        0    0 1140     m[m7` - 3] = 1269 = m1093
//        0    0 1197     m[m7` - 2] = m[m7` - 3]` = 1
//        0    0 1254     m[m7` - 1] = m[m7` - 2]` + m[m7` - 1]` = 1

        int m7 = get(7);
        int mm1 = get(m7 - 1);
        int mm2 = get(m7 - 2);
        int mm3 = get(m7 - 3);

        set(m7 - 3, 1269);
        set(m7 - 2, mm3);
        set(m7 - 1, mm2 + mm1);

        p = 162;
    }

    private void f162() {
//        0    0  363     m[m7` - 3] = m[m7` - 2] = 1
//        0    7  372     m7      = m7` - 2 = 1855
        int m7 = get(7);
        int mm1 = get(m7 - 1);
        int mm2 = get(m7 - 2);

        int m235 = 0;
        if (mm1 != 0) {
            m235 = mm2;
        }

//        0  277  303     m277    = m[m7` - 3] = 1269
//        0  377  315     m377    = m[m7` - 3] = 1269


        set(m7 - 3, m235);
        set(7, m7 - 2);

        p = 1269;
    }

    public int get(int p) {
        Integer v = memory.get(p);
        if (v == null) {
            return 0;
        }
        return v;
    }

    public void set(int p, int v) {
        if  (p == 565 && v != 684) {
            System.out.println("Ouch 565");
        }
        if  (p == 1093 && v != 1269) {
            System.out.println("Ouch 1093");
        }
        if (p%3==2) {
            if (p >= 1398 && p <= 1560 && v != p+1) {
                System.out.println("Reprogramming ((: " + p + " -> " + v);
            }
        }
        memory.put(p, v);
    }
}
