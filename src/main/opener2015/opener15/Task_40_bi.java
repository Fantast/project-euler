package opener15;

import tasks.AbstractTask;
import tasks.Tester;
import utils.log.Logger;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

import static java.math.BigInteger.ONE;
import static java.math.BigInteger.ZERO;

//Answer : 310698712847350873778797133849516996404195026004384481594202389850309269880623758167653556508466528171006096718007132609899313749983742862406898235903660730724954996695622538244320784953464285321427005678570411695777940717426868342865527327254997864006822111582924844459783190329820081721350152114251152489659927998688860867701721701240175070544280855591231028096074578417331525053804777851201862903869164142248527794135407010797872323758601574567454713157016363375410843996942950915715923738764187415051716794643233464605160181698015735047368260770735474168353563788332566374700206921595298248841472155327845459472464864872021047913675438688579679284954337175748461847128832860664926438065754706490838602110244280169972776703198428471495301866327142453980236485589362646238445296659381107421103564323271458760133218749958154500644406321042834956933996962074307164663539895214246439643058484207693915620095358676767747589350108409435845276979753561746634779229448280966434490437532178638579771236560907056140458012029086485736515761614558160004780678829542379586471428323844199459259741500063059887727339125058234436666013931561760579197592403049524243839452682196066748585770827915644898474415066106790559435421543242703478439621608907331117338836234594622610664699317523933136558183520553901188878088708505091915263363703710277511262620177554096475485391845107559244852924143530839155801533103720774130022339403279198156379080322717886020947932736779913849094018197883773277455749052482423817294477677064210259955235128399841881451936250892068404745290407289604652891762527193768912619296157207211821414889951021086741601428403646973553450784906156430098484101803777843290447330530796702619254716266916622462661851088503127399370598911675185016061851404224943210267340120058346209319229378628557813158346703161275868852749404245020311331325164102110879658449665004535992845980184902517115877379446137423724130156002301578303518274918906934084823263271048425469914222101250619314420518368845357385582043923724838458033273120335150874339387040118435341773183755828329978591954336098895929322377091432431851400742333408101731416034903185928099919748211691500408434138245147905716999612893182629974370628125657954284422968826047473756629776919196708671730769013159700844112414700611616239975611454554594875688809690249411545712162617629298503250443079736403082971160032500559605936096729739662026722692456246387698088707517655819875107780257420951821695956040955996791258231484655656492441218290057735388866490278460620751671830037732467377435694604392944741987183017116134182061254435524565754346576048895339258144767298778610425318926367052255115761736229029009543306027353477818244358400035326442144063105755030688043474244619372744964366083017226738440835514723784281221029780150542506832453975704705970060244564586911276178290165326246419661842733504951891418413124942855405686890704907725191706086603367961860487862393758048306121153533991052975718368298509385234915919667538277235751503610129056184992768762165751166783755598788338877115704412384368911611391307967484290560300990898018927435022487322783742714015117938775351058122376065568783313800315270567936111760341658508831588647922797246870500499965420790611822517247685308897562863761393961444686499443497531357025564067594506777014672139220832796789192981903311373822897851450403162278939663117495857698272349294175910976698874986339106921009793112300145760914054521230430576452140188394844296809480809673962253421790610419214663150185914441024948576449717771386471703438728422781915107066887362860401448170347641116989447353340541468902448153187535123682800357518454573683014179825588537541359706318604580621084693135437852250209431052185302747694061988323662399644158661374700230836746034738947812880432403307011354133723874325419063015807142871891799422368086005563193436790147747257372865472812513020730021642077468206868186079345150574031062067003481522396201192553063543586066536334976977906872237048972161928525957350799494011039158429503151029485012523261984375210220907266987706252581105626009421605589573084385752425735116109182018565347941769595087356420547074170238214097229088948638018121605780063131999350558473261920862854972929309845328037277232998571102247415182411796052126005075444027938720549858040928640844198522235158295902533685992879465293100169830276575474510841571007644404211969457897183989713617194682325137285902335330297332514728240784093746462645855194903944137412087867483750351645449575023245667714333934355384476261354721754971024405859452324696694640975405113088817209998515841069525975009281314149678575288365167458663662525644110009906644938524528256382977174260139978839627421451343850034231283405412800013690379356335144515860677337538261729413758457868616837940918356346832500414375615309254269587086339164508545757049800618406584407957174365552882709468015083764241731889905894076559484579575224883263336027337223094582949936779253306722718776412797671958420592660485533760261799655230782386584049317049939099958220663364656727424930033938029839006642084705796443607504123628427308335431969502332877337627121335929471004190431248896925428220799569367346127982351012802917323160695121866061956152724048322768647345294233816790753605499681203775003136409
public class Task_40_bi extends AbstractTask {

    public static void main(String[] args) {
        Logger.init("default.log");
        Tester.test(new Task_40_bi());
        Logger.close();
    }

    int mem[] = new int[]{
            0, 0, 3, 0, 1, 6, 0, 1842, 9, 0, 7, 12, 0, 132, 15, 51, 51, 18, 7, 0, 21, 0, 51, 24, 0, 0, 27, 52, 52, 30, 7, 0, 33, 0, 52, 36, 0, 0, 39, 58, 58, 42, 7, 0, 45, 0, 58, 48, 0, 0, 51, 0, 0, 54, 13, 0, 57, 0, 0, 60, 0, 0, 63, 4, 0, 66, 0, 7, 69, 0, 0, 72, 108, 108, 75, 7, 0, 78, 0, 108, 81, 0, 0, 84, 109, 109, 87, 7, 0, 90, 0, 109, 93, 0, 0, 96, 115, 115, 99, 7, 0, 102, 0, 115, 105, 0, 0, 108, 0, 0, 111, 10, 0, 114, 0, 0, 117, 0, 0, 120, 4, 0, 123, 0, 7, 126, 0, 0, 129, 0, 0, 1398, 4, 7, 135, 150, 150, 138, 7, 0, 141, 0, 150, 144, 0, 0, 147, 1839, 1839, 150, 0, 0, 153, 0, 1839, 156, 0, 0, 159, 0, 0, 1839, 0, 0, 165, 4, 7, 168, 183, 183, 171, 7, 0, 174, 0, 183, 177, 0, 0, 180, 163, 163, 183, 0, 0, 186, 0, 163, 189, 0, 0, 192, 0, 0, 195, 4, 7, 198, 213, 213, 201, 7, 0, 204, 0, 213, 207, 0, 0, 210, 193, 193, 213, 0, 0, 216, 0, 193, 219, 0, 0, 222, 235, 235, 225, 0, 0, 228, 0, 235, 231, 0, 0, 234, 0, 0, 237, 163, 0, 243, 0, 0, 249, 0, 0, 246, 0, 163, 276, 193, 0, 252, 0, 235, 255, 0, 0, 258, 4, 163, 261, 163, 0, 267, 0, 0, 273, 0, 0, 270, 0, 163, 276, 0, 0, 249, 0, 0, 279, 4, 7, 282, 297, 297, 285, 7, 0, 288, 0, 297, 291, 0, 0, 294, 277, 277, 297, 0, 0, 300, 0, 277, 303, 0, 0, 306, 377, 377, 309, 277, 0, 312, 0, 377, 315, 0, 0, 318, 354, 354, 321, 7, 0, 324, 0, 354, 327, 0, 0, 330, 355, 355, 333, 7, 0, 336, 0, 355, 339, 0, 0, 342, 361, 361, 345, 7, 0, 348, 0, 361, 351, 0, 0, 354, 0, 0, 357, 235, 0, 360, 0, 0, 363, 0, 0, 366, 4, 0, 369, 0, 7, 372, 0, 0, 375, 0, 0, 277, 0, 0, 381, 4, 7, 384, 399, 399, 387, 7, 0, 390, 0, 399, 393, 0, 0, 396, 379, 379, 399, 0, 0, 402, 0, 379, 405, 0, 0, 408, 421, 421, 411, 4, 0, 414, 0, 421, 417, 0, 0, 420, 0, 4, 423, 436, 436, 426, 0, 0, 429, 0, 436, 432, 0, 0, 435, 0, 0, 438, 436, 436, 441, 379, 0, 444, 0, 436, 447, 0, 0, 450, 436, 0, 456, 0, 0, 462, 0, 0, 459, 0, 436, 1296, 4, 421, 465, 4, 436, 468, 436, 0, 474, 0, 0, 480, 0, 0, 477, 0, 436, 1296, 493, 493, 483, 0, 0, 486, 0, 493, 489, 0, 0, 492, 0, 0, 495, 493, 493, 498, 436, 0, 501, 0, 493, 504, 0, 0, 507, 543, 543, 510, 7, 0, 513, 0, 543, 516, 0, 0, 519, 544, 544, 522, 7, 0, 525, 0, 544, 528, 0, 0, 531, 550, 550, 534, 7, 0, 537, 0, 550, 540, 0, 0, 543, 0, 0, 546, 436, 0, 549, 0, 0, 552, 0, 0, 555, 4, 0, 558, 0, 7, 561, 0, 0, 564, 0, 684, 567, 603, 603, 570, 7, 0, 573, 0, 603, 576, 0, 0, 579, 604, 604, 582, 7, 0, 585, 0, 604, 588, 0, 0, 591, 610, 610, 594, 7, 0, 597, 0, 610, 600, 0, 0, 603, 0, 0, 606, 565, 0, 609, 0, 0, 612, 0, 0, 615, 4, 0, 618, 0, 7, 621, 0, 0, 624, 660, 660, 627, 7, 0, 630, 0, 660, 633, 0, 0, 636, 661, 661, 639, 7, 0, 642, 0, 661, 645, 0, 0, 648, 667, 667, 651, 7, 0, 654, 0, 667, 657, 0, 0, 660, 0, 0, 663, 493, 0, 666, 0, 0, 669, 0, 0, 672, 4, 0, 675, 0, 7, 678, 0, 0, 681, 0, 0, 378, 4, 7, 687, 702, 702, 690, 7, 0, 693, 0, 702, 696, 0, 0, 699, 493, 493, 702, 0, 0, 705, 0, 493, 708, 0, 0, 711, 4, 7, 714, 729, 729, 717, 7, 0, 720, 0, 729, 723, 0, 0, 726, 436, 436, 729, 0, 0, 732, 0, 436, 735, 0, 0, 738, 751, 751, 741, 0, 0, 744, 0, 751, 747, 0, 0, 750, 0, 0, 753, 751, 751, 756, 436, 0, 759, 0, 751, 762, 0, 0, 765, 4, 751, 768, 804, 804, 771, 7, 0, 774, 0, 804, 777, 0, 0, 780, 805, 805, 783, 7, 0, 786, 0, 805, 789, 0, 0, 792, 811, 811, 795, 7, 0, 798, 0, 811, 801, 0, 0, 804, 0, 0, 807, 436, 0, 810, 0, 0, 813, 0, 0, 816, 4, 0, 819, 0, 7, 822, 0, 0, 825, 861, 861, 828, 7, 0, 831, 0, 861, 834, 0, 0, 837, 862, 862, 840, 7, 0, 843, 0, 862, 846, 0, 0, 849, 868, 868, 852, 7, 0, 855, 0, 868, 858, 0, 0, 861, 0, 0, 864, 493, 0, 867, 0, 0, 870, 0, 0, 873, 4, 0, 876, 0, 7, 879, 0, 0, 882, 0, 1002, 885, 921, 921, 888, 7, 0, 891, 0, 921, 894, 0, 0, 897, 922, 922, 900, 7, 0, 903, 0, 922, 906, 0, 0, 909, 928, 928, 912, 7, 0, 915, 0, 928, 918, 0, 0, 921, 0, 0, 924, 883, 0, 927, 0, 0, 930, 0, 0, 933, 4, 0, 936, 0, 7, 939, 0, 0, 942, 978, 978, 945, 7, 0, 948, 0, 978, 951, 0, 0, 954, 979, 979, 957, 7, 0, 960, 0, 979, 963, 0, 0, 966, 985, 985, 969, 7, 0, 972, 0, 985, 975, 0, 0, 978, 0, 0, 981, 751, 0, 984, 0, 0, 987, 0, 0, 990, 4, 0, 993, 0, 7, 996, 0, 0, 999, 0, 0, 378, 4, 7, 1005, 1020, 1020, 1008, 7, 0, 1011, 0, 1020, 1014, 0, 0, 1017, 751, 751, 1020, 0, 0, 1023, 0, 751, 1026, 0, 0, 1029, 4, 7, 1032, 1047, 1047, 1035, 7, 0, 1038, 0, 1047, 1041, 0, 0, 1044, 493, 493, 1047, 0, 0, 1050, 0, 493, 1053, 0, 0, 1056, 4, 7, 1059, 1074, 1074, 1062, 7, 0, 1065, 0, 1074, 1068, 0, 0, 1071, 436, 436, 1074, 0, 0, 1077, 0, 436, 1080, 0, 0, 1083, 751, 0, 1086, 0, 493, 1089, 0, 0, 1092, 0, 1269, 1095, 1131, 1131, 1098, 7, 0, 1101, 0, 1131, 1104, 0, 0, 1107, 1132, 1132, 1110, 7, 0, 1113, 0, 1132, 1116, 0, 0, 1119, 1138, 1138, 1122, 7, 0, 1125, 0, 1138, 1128, 0, 0, 1131, 0, 0, 1134, 1093, 0, 1137, 0, 0, 1140, 0, 0, 1143, 4, 0, 1146, 0, 7, 1149, 0, 0, 1152, 1188, 1188, 1155, 7, 0, 1158, 0, 1188, 1161, 0, 0, 1164, 1189, 1189, 1167, 7, 0, 1170, 0, 1189, 1173, 0, 0, 1176, 1195, 1195, 1179, 7, 0, 1182, 0, 1195, 1185, 0, 0, 1188, 0, 0, 1191, 436, 0, 1194, 0, 0, 1197, 0, 0, 1200, 4, 0, 1203, 0, 7, 1206, 0, 0, 1209, 1245, 1245, 1212, 7, 0, 1215, 0, 1245, 1218, 0, 0, 1221, 1246, 1246, 1224, 7, 0, 1227, 0, 1246, 1230, 0, 0, 1233, 1252, 1252, 1236, 7, 0, 1239, 0, 1252, 1242, 0, 0, 1245, 0, 0, 1248, 493, 0, 1251, 0, 0, 1254, 0, 0, 1257, 4, 0, 1260, 0, 7, 1263, 0, 0, 1266, 0, 0, 162, 4, 7, 1272, 1287, 1287, 1275, 7, 0, 1278, 0, 1287, 1281, 0, 0, 1284, 421, 421, 1287, 0, 0, 1290, 0, 421, 1293, 0, 0, 1296, 0, 0, 1299, 4, 7, 1302, 1317, 1317, 1305, 7, 0, 1308, 0, 1317, 1311, 0, 0, 1314, 1297, 1297, 1317, 0, 0, 1320, 0, 1297, 1323, 0, 0, 1326, 1397, 1397, 1329, 1297, 0, 1332, 0, 1397, 1335, 0, 0, 1338, 1374, 1374, 1341, 7, 0, 1344, 0, 1374, 1347, 0, 0, 1350, 1375, 1375, 1353, 7, 0, 1356, 0, 1375, 1359, 0, 0, 1362, 1381, 1381, 1365, 7, 0, 1368, 0, 1381, 1371, 0, 0, 1374, 0, 0, 1377, 421, 0, 1380, 0, 0, 1383, 0, 0, 1386, 4, 0, 1389, 0, 7, 1392, 0, 0, 1395, 0, 0, 1297, 0, 0, 1401, 4, 7, 1404, 1419, 1419, 1407, 7, 0, 1410, 0, 1419, 1413, 0, 0, 1416, 1399, 1399, 1419, 0, 0, 1422, 0, 1399, 1425, 0, 0, 1428, 1441, 1441, 1431, 0, 0, 1434, 0, 1441, 1437, 0, 0, 1440, 0, 0, 1443, 0, 1563, 1446, 1482, 1482, 1449, 7, 0, 1452, 0, 1482, 1455, 0, 0, 1458, 1483, 1483, 1461, 7, 0, 1464, 0, 1483, 1467, 0, 0, 1470, 1489, 1489, 1473, 7, 0, 1476, 0, 1489, 1479, 0, 0, 1482, 0, 0, 1485, 1444, 0, 1488, 0, 0, 1491, 0, 0, 1494, 4, 0, 1497, 0, 7, 1500, 0, 0, 1503, 1539, 1539, 1506, 7, 0, 1509, 0, 1539, 1512, 0, 0, 1515, 1540, 1540, 1518, 7, 0, 1521, 0, 1540, 1524, 0, 0, 1527, 1546, 1546, 1530, 7, 0, 1533, 0, 1546, 1536, 0, 0, 1539, 0, 0, 1542, 1399, 0, 1545, 0, 0, 1548, 0, 0, 1551, 4, 0, 1554, 0, 7, 1557, 0, 0, 1560, 0, 0, 378, 4, 7, 1566, 1581, 1581, 1569, 7, 0, 1572, 0, 1581, 1575, 0, 0, 1578, 1441, 1441, 1581, 0, 0, 1584, 0, 1441, 1587, 0, 0, 1590, 0, 1710, 1593, 1629, 1629, 1596, 7, 0, 1599, 0, 1629, 1602, 0, 0, 1605, 1630, 1630, 1608, 7, 0, 1611, 0, 1630, 1614, 0, 0, 1617, 1636, 1636, 1620, 7, 0, 1623, 0, 1636, 1626, 0, 0, 1629, 0, 0, 1632, 1591, 0, 1635, 0, 0, 1638, 0, 0, 1641, 4, 0, 1644, 0, 7, 1647, 0, 0, 1650, 1686, 1686, 1653, 7, 0, 1656, 0, 1686, 1659, 0, 0, 1662, 1687, 1687, 1665, 7, 0, 1668, 0, 1687, 1671, 0, 0, 1674, 1693, 1693, 1677, 7, 0, 1680, 0, 1693, 1683, 0, 0, 1686, 0, 0, 1689, 1441, 0, 1692, 0, 0, 1695, 0, 0, 1698, 4, 0, 1701, 0, 7, 1704, 0, 0, 1707, 0, 0, 378, 4, 7, 1713, 1728, 1728, 1716, 7, 0, 1719, 0, 1728, 1722, 0, 0, 1725, 1441, 1441, 1728, 0, 0, 1731, 0, 1441, 1734, 0, 0, 1737, 0, 0, 1740, 4, 7, 1743, 1758, 1758, 1746, 7, 0, 1749, 0, 1758, 1752, 0, 0, 1755, 1738, 1738, 1758, 0, 0, 1761, 0, 1738, 1764, 0, 0, 1767, 1838, 1838, 1770, 1738, 0, 1773, 0, 1838, 1776, 0, 0, 1779, 1815, 1815, 1782, 7, 0, 1785, 0, 1815, 1788, 0, 0, 1791, 1816, 1816, 1794, 7, 0, 1797, 0, 1816, 1800, 0, 0, 1803, 1822, 1822, 1806, 7, 0, 1809, 0, 1822, 1812, 0, 0, 1815, 0, 0, 1818, 1441, 0, 1821, 0, 0, 1824, 0, 0, 1827, 4, 0, 1830, 0, 7, 1833, 0, 0, 1836, 0, 0, 1738, 0, 0, 0
    };

    Map<Integer, BigInteger> memory = new HashMap<>();

    int goal = 1839;

    private PrintWriter out;

    public void solving() throws IOException {
        out = new PrintWriter(
                new BufferedWriter(
                        new FileWriter("/downloads/task40.out")));

        for (int i = 0; i < mem.length; i++) {
            memory.put(i, bi(mem[i]));
        }

        start();
    }

    //Main
    // stack head = 1842
    //
    // push 132
    // push 1563
    // push 7
    // goto 378

    private void start() {
        set(7, bi(1842));
        push(132);
        push(1563);
        push(7);
        call(378);
    }

    BigInteger magic[] = new BigInteger[50000];
    int haveMagic = 0;
    private BigInteger magic(int ind) {
        if (ind >= haveMagic) {
            if (haveMagic == 0) {
                magic[haveMagic++] = ONE;
            }
            for (int i = haveMagic; i <= ind; ++i) {
                BigInteger one = i % 2 == 0 ? ONE : ONE.negate();
                magic[i] = magic[i-1].multiply(bi(i)).add(one);
            }
        }
        return magic[ind];
    }

    private void f378() {
        int x = pop().intValueExact();
        int addr = pop().intValueExact();
        push(magic(x));
        call(addr);
    }

    // A = pop (->493)
    // B = pop (->436)
    // X = B - 1 (->751)
    // push B
    // push A
    // push 1002
    // push B - 1
    // goto 378
    // [...B A] => [... B A 1002 B-1] && goto 378
    private void f684() {
        int m7 = get(7).intValueExact();
        BigInteger b = get(m7 - 2);

        push(1002);
        push(b.subtract(ONE));

        f378();
    }

    // A = pop
    // push 1710
    // push A
    // goto 378
    //[.. A] => [.. 1710 A] && goto 378
    private void f1563() {
        BigInteger a = pop();

        push(1710);
        push(a);

        f378();
    }

    // A = pop
    // B = pop
    // C = pop
    // ADDR = pop
    // D = (A+B)*C
    // push D
    // goto ADDR
    //[... ADDR C B A] => [.. (A+B)*C] && goto ADDR
    private void f1002() {
        BigInteger a = pop();
        BigInteger b = pop();
        BigInteger c = pop();
        int addr = pop().intValueExact();

        push((a.add(b)).multiply(c));

        call(addr);
    }

    private void call(int addr) {
        if (addr == 378) {
            f378();
        } else if (addr == 1002) {
            f1002();
        } else if (addr == 684) {
            f684();
        } else if (addr == 1563) {
            f1563();
        } else if (addr == 1710) {
            f1710();
        } else if (addr == 132) {
            f132();
        } else {
            throw new IllegalStateException("Unknown function: " + addr);
        }
    }

    public void f1710() {
        int p = 1710;
        System.out.println("1710 reached!..");

        while (true) {
            BigInteger a = get(p);
            BigInteger b = get(p + 1);
            BigInteger c = get(p + 2);

            BigInteger av = get(a.intValueExact());
            BigInteger bv = get(b.intValueExact());
            BigInteger d = bv.subtract(av);
            set(b.intValueExact(), d);

//            out.print(String.format("%4d - a: %5d, b: %5d, c: %5d, av: %5d, bv: %5d, av-bv=%5d -> ", p, a, b, c, av, bv, d));
//            out.print(String.format("%5d%5d%5d     m%-7d= m%d - m%d = %d", a, b, c, b, b, a, d));
//            out.print(String.format("%5d%5d%5d     m%-7d= m%d - m%d = %d", mem[p], mem[p+1], mem[p+2], b, b, a, d));

            if (d.compareTo(ZERO) <= 0 && !c.equals(bi(p+3))) {
                p = c.intValueExact();
                out.println(String.format("   -> %d", p));
            } else {
                p = p+3;
                out.println();
            }

            if (p == goal) {
                break;
            }

            if (p == 378) {
                f378();
                continue;
            }
            if (p == 684) {
                f684();
                continue;
            }
            if (p == 1002) {
                f1002();
                continue;
            }
            if (p == 1563) {
                f1563();
                continue;
            }
            if (p == 1710) {
                f1710();
                continue;
            }
            if (p == 132) {
                f132();
                continue;
            }
        }
    }

    private void f132() {
        System.out.println("Result: " + pop());
        System.exit(1);
    }

    public BigInteger pop() {
        int m7 = get(7).intValue() - 1;
        set(7, bi(m7));
        return get(m7);
    }

    public void push(int value) {
        push(bi(value));
    }

    public void push(BigInteger value) {
        int m7 = get(7).intValue();
        set(m7, value);
        set(7, bi(m7 + 1));
    }

    public BigInteger get(int p) {
        BigInteger v = memory.get(p);
        if (v == null) {
            return BigInteger.ZERO;
        }
        return v;
    }

    public void set(int p, BigInteger v) {
        memory.put(p, v);
    }
}
